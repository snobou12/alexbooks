/** @format */

import axios from "axios";
import React from "react";
import { useDispatch } from "react-redux";
import { toast } from "react-toastify";

import {
	handleChangeCoverType,
	handleChangeCoverEcoColor,
	handleChangeCoverDecor,
	handleChangeCoverEcoLetteringColor,
	handleChangeCoverEcoDesign,
	handleChangeEcoPhotoBidSize,
	handleChangeEcoMetalplateColor,
	handleChangeEcoMetalplateSize,
	handleChangeEcoMetalplateDecoration,
	handleChangeEcoMetalplateEngrave,
	handleChangePhotoCoverColor,
	handleChangePhotoBidBlobImage,
	handleChangeMetalplateTextSize,
	handleChangeMetalplateTextFont,
	handleChangeMetalplateText,
	handleChangePhotoCoverImage,
} from "../../../../redux/reducers/constructor/constructorSlice";
import { BASE_URL } from "../../../../static/values";

import "./Cover.scss";
//Это step слева (визуал)
const Cover = ({ albumId, selectedType, types }) => {
	const dispatch = useDispatch();
	//Получить главные svgшки для левой части
	function getTypeSvg(typeId) {
		switch (typeId) {
			case 0:
				return (
					<svg
						width="34"
						height="27"
						viewBox="0 0 34 27"
						xmlns="http://www.w3.org/2000/svg"
					>
						<path d="M10.8044 4.13885C11.2217 4.13885 11.5599 3.80058 11.5599 3.3833C11.5599 2.96602 11.2217 2.62775 10.8044 2.62775C10.3871 2.62775 10.0488 2.96602 10.0488 3.3833C10.0488 3.80058 10.3871 4.13885 10.8044 4.13885Z"></path>
						<path d="M26.1238 18.1344L26.4069 14.3756L25.0885 14.2762L24.8775 17.0767L22.5726 15.1205L15.6279 15.2037V13.8876C16.233 13.8558 16.8267 13.7259 17.3965 13.4989C18.0309 13.2462 18.6025 12.8877 19.0989 12.4319L29.0178 12.0953L26.1818 10.7163C19.7256 7.40978 15.5585 2.89581 15.1021 2.38932C14.6791 1.91993 13.6536 0.802106 13.2656 0.561552C12.673 0.194165 11.9928 0 11.2985 0C10.8026 0 10.3163 0.0982214 9.85327 0.291942C8.68333 0.781328 7.8765 1.82749 7.63984 3.01342L5.95402 4.49219L7.84223 5.13297C8.024 5.5808 8.28989 5.99002 8.62622 6.33474C8.76061 6.47246 9.174 6.82518 9.84094 7.38501C9.66699 8.39356 9.77455 9.42233 10.1579 10.3846C10.8779 12.1919 12.447 13.4568 14.3058 13.8011V15.2194L7.33312 15.3029C7.48878 14.1632 7.2604 12.9942 6.66496 11.9482C5.95041 10.6927 4.81436 9.79932 3.46631 9.43271L2.83148 9.26005L2.6557 9.89404C2.28249 11.2403 2.47059 12.6732 3.18515 13.9287C3.47575 14.4393 3.83692 14.8887 4.25275 15.2683C2.32337 15.6826 0.69244 17.1523 0.172554 19.0639L0 19.6988L0.633996 19.8746C1.07749 19.9975 1.53732 20.0599 2.00065 20.0599C4.21458 20.0599 6.24951 18.6435 7.02501 16.6289L16.9877 16.5096L15.6358 17.9367C15.0438 17.7077 14.417 17.5899 13.7656 17.5899C11.6915 17.5899 9.7866 18.7664 8.91272 20.5872L8.62805 21.1803L9.21972 21.4679C9.92427 21.8103 10.6859 21.9839 11.4835 21.9839C12.4962 21.9839 13.4682 21.7029 14.2998 21.2038C14.269 21.5961 14.279 21.9962 14.3346 22.3992C14.5321 23.8303 15.2552 25.0816 16.371 25.9224L16.8964 26.3183L17.2949 25.7949C18.1412 24.6834 18.4985 23.2831 18.3012 21.852C18.132 20.6261 17.5761 19.533 16.7191 18.716L18.8302 16.4876L22.0942 16.4485L33.1443 25.8272L34 24.8191L26.1238 18.1344ZM11.3862 9.89521C11.0538 9.06088 10.9931 8.16145 11.2106 7.29406L11.3112 6.89318L10.8284 6.48757C10.5192 6.22824 9.69788 5.53957 9.57244 5.41119C9.27994 5.11141 9.06933 4.7348 8.9635 4.32208C8.66978 3.1767 9.27177 1.96849 10.3636 1.51177C10.6642 1.38599 10.9788 1.32221 11.2986 1.32221C11.7465 1.32221 12.1859 1.44782 12.5625 1.6811C12.6681 1.75421 13.1879 2.23993 14.1222 3.27681C14.5507 3.75242 18.1687 7.67289 23.8433 10.9477L18.5379 11.1278L18.353 11.3148C17.9423 11.7304 17.4559 12.0519 16.9072 12.2704C16.4023 12.4715 15.8736 12.5734 15.3356 12.5734C13.5846 12.5735 12.0343 11.5223 11.3862 9.89521ZM10.4834 20.5335C11.2306 19.5305 12.4519 18.912 13.7656 18.912C14.1095 18.912 14.4438 18.955 14.7657 19.0402C14.0185 20.0431 12.7972 20.6617 11.4834 20.6617C11.1397 20.6617 10.8054 20.6187 10.4834 20.5335ZM16.9912 22.0326C17.1031 22.8434 16.9715 23.6628 16.6273 24.3686C16.1049 23.7823 15.7563 23.0292 15.6444 22.2184C15.5326 21.4077 15.6641 20.5883 16.0084 19.8824C16.5308 20.4688 16.8794 21.2219 16.9912 22.0326ZM3.80497 10.9705C4.50775 11.3209 5.11102 11.8909 5.51591 12.6022C5.92079 13.3135 6.10279 14.1232 6.04518 14.9063C5.34241 14.5559 4.73914 13.986 4.33425 13.2746C3.92936 12.5633 3.74736 11.7538 3.80497 10.9705ZM2.00065 18.7377C1.9031 18.7377 1.80582 18.7339 1.70899 18.7265C2.37398 17.3872 3.80653 16.4728 5.35619 16.4728C5.45374 16.4728 5.55102 16.4766 5.64785 16.4839C4.98286 17.8233 3.5502 18.7377 2.00065 18.7377Z"></path>
					</svg>
				);
			case 1:
				return (
					<svg
						width="34"
						height="34"
						viewBox="0 0 34 34"
						xmlns="http://www.w3.org/2000/svg"
					>
						<path d="M4.98674 6.97904H4.25002C3.88322 6.97904 3.58594 6.68176 3.58594 6.31496C3.58594 5.94816 3.88322 5.65088 4.25002 5.65088H4.98674C5.35328 5.65088 5.65082 5.94816 5.65082 6.31496C5.65082 6.68176 5.35328 6.97904 4.98674 6.97904Z"></path>
						<path d="M8.38029 6.97904H7.64357C7.27677 6.97904 6.97949 6.68176 6.97949 6.31496C6.97949 5.94816 7.27677 5.65088 7.64357 5.65088H8.38029C8.74683 5.65088 9.04437 5.94816 9.04437 6.31496C9.04437 6.68176 8.74683 6.97904 8.38029 6.97904Z"></path>
						<path d="M6.31545 9.04399C5.94865 9.04399 5.65137 8.74671 5.65137 8.37991V7.64345C5.65137 7.27665 5.94865 6.97937 6.31545 6.97937C6.68199 6.97937 6.97953 7.27665 6.97953 7.64345V8.37991C6.97953 8.74671 6.68199 9.04399 6.31545 9.04399Z"></path>
						<path d="M6.31545 5.65082C5.94865 5.65082 5.65137 5.35354 5.65137 4.98674V4.25002C5.65137 3.88322 5.94865 3.58594 6.31545 3.58594C6.68199 3.58594 6.97953 3.88322 6.97953 4.25002V4.98674C6.97953 5.35354 6.68199 5.65082 6.31545 5.65082Z"></path>
						<path d="M15.6713 6.97904H14.9346C14.568 6.97904 14.2705 6.68176 14.2705 6.31496C14.2705 5.94816 14.568 5.65088 14.9346 5.65088H15.6713C16.0381 5.65088 16.3354 5.94816 16.3354 6.31496C16.3354 6.68176 16.0381 6.97904 15.6713 6.97904Z"></path>
						<path d="M19.0658 6.97904H18.3291C17.9623 6.97904 17.665 6.68176 17.665 6.31496C17.665 5.94816 17.9623 5.65088 18.3291 5.65088H19.0658C19.4324 5.65088 19.7299 5.94816 19.7299 6.31496C19.7299 6.68176 19.4324 6.97904 19.0658 6.97904Z"></path>
						<path d="M17.001 9.04399C16.6342 9.04399 16.3369 8.74671 16.3369 8.37991V7.64345C16.3369 7.27665 16.6342 6.97937 17.001 6.97937C17.3678 6.97937 17.6651 7.27665 17.6651 7.64345V8.37991C17.6651 8.74671 17.3678 9.04399 17.001 9.04399Z"></path>
						<path d="M17.001 5.65082C16.6342 5.65082 16.3369 5.35354 16.3369 4.98674V4.25002C16.3369 3.88322 16.6342 3.58594 17.001 3.58594C17.3678 3.58594 17.6651 3.88322 17.6651 4.25002V4.98674C17.6651 5.35354 17.3678 5.65082 17.001 5.65082Z"></path>
						<path d="M26.3578 6.97904H25.6211C25.2546 6.97904 24.957 6.68176 24.957 6.31496C24.957 5.94816 25.2546 5.65088 25.6211 5.65088H26.3578C26.7246 5.65088 27.0219 5.94816 27.0219 6.31496C27.0219 6.68176 26.7246 6.97904 26.3578 6.97904Z"></path>
						<path d="M29.7504 6.97904H29.0137C28.6471 6.97904 28.3496 6.68176 28.3496 6.31496C28.3496 5.94816 28.6471 5.65088 29.0137 5.65088H29.7504C30.1172 5.65088 30.4145 5.94816 30.4145 6.31496C30.4145 6.68176 30.1172 6.97904 29.7504 6.97904Z"></path>
						<path d="M27.6856 9.04399C27.319 9.04399 27.0215 8.74671 27.0215 8.37991V7.64345C27.0215 7.27665 27.319 6.97937 27.6856 6.97937C28.0524 6.97937 28.3496 7.27665 28.3496 7.64345V8.37991C28.3496 8.74671 28.0524 9.04399 27.6856 9.04399Z"></path>
						<path d="M27.6856 5.65082C27.319 5.65082 27.0215 5.35354 27.0215 4.98674V4.25002C27.0215 3.88322 27.319 3.58594 27.6856 3.58594C28.0524 3.58594 28.3496 3.88322 28.3496 4.25002V4.98674C28.3496 5.35354 28.0524 5.65082 27.6856 5.65082Z"></path>
						<path d="M4.98674 17.6645H4.25002C3.88322 17.6645 3.58594 17.3672 3.58594 17.0004C3.58594 16.6336 3.88322 16.3363 4.25002 16.3363H4.98674C5.35328 16.3363 5.65082 16.6336 5.65082 17.0004C5.65082 17.3672 5.35328 17.6645 4.98674 17.6645Z"></path>
						<path d="M8.38029 17.6645H7.64357C7.27677 17.6645 6.97949 17.3672 6.97949 17.0004C6.97949 16.6336 7.27677 16.3363 7.64357 16.3363H8.38029C8.74683 16.3363 9.04437 16.6336 9.04437 17.0004C9.04437 17.3672 8.74683 17.6645 8.38029 17.6645Z"></path>
						<path d="M6.31545 19.7293C5.94865 19.7293 5.65137 19.432 5.65137 19.0652V18.3285C5.65137 17.9617 5.94865 17.6644 6.31545 17.6644C6.68199 17.6644 6.97953 17.9617 6.97953 18.3285V19.0652C6.97953 19.432 6.68199 19.7293 6.31545 19.7293Z"></path>
						<path d="M6.31545 16.3366C5.94865 16.3366 5.65137 16.0393 5.65137 15.6725V14.9358C5.65137 14.569 5.94865 14.2717 6.31545 14.2717C6.68199 14.2717 6.97953 14.569 6.97953 14.9358V15.6725C6.97953 16.0393 6.68199 16.3366 6.31545 16.3366Z"></path>
						<path d="M15.6713 17.6645H14.9346C14.568 17.6645 14.2705 17.3672 14.2705 17.0004C14.2705 16.6336 14.568 16.3363 14.9346 16.3363H15.6713C16.0381 16.3363 16.3354 16.6336 16.3354 17.0004C16.3354 17.3672 16.0381 17.6645 15.6713 17.6645Z"></path>
						<path d="M19.0658 17.6645H18.3291C17.9623 17.6645 17.665 17.3672 17.665 17.0004C17.665 16.6336 17.9623 16.3363 18.3291 16.3363H19.0658C19.4324 16.3363 19.7299 16.6336 19.7299 17.0004C19.7299 17.3672 19.4324 17.6645 19.0658 17.6645Z"></path>
						<path d="M17.001 19.7293C16.6342 19.7293 16.3369 19.432 16.3369 19.0652V18.3285C16.3369 17.9617 16.6342 17.6644 17.001 17.6644C17.3678 17.6644 17.6651 17.9617 17.6651 18.3285V19.0652C17.6651 19.432 17.3678 19.7293 17.001 19.7293Z"></path>
						<path d="M17.001 16.3366C16.6342 16.3366 16.3369 16.0393 16.3369 15.6725V14.9358C16.3369 14.569 16.6342 14.2717 17.001 14.2717C17.3678 14.2717 17.6651 14.569 17.6651 14.9358V15.6725C17.6651 16.0393 17.3678 16.3366 17.001 16.3366Z"></path>
						<path d="M26.3578 17.6645H25.6211C25.2546 17.6645 24.957 17.3672 24.957 17.0004C24.957 16.6336 25.2546 16.3363 25.6211 16.3363H26.3578C26.7246 16.3363 27.0219 16.6336 27.0219 17.0004C27.0219 17.3672 26.7246 17.6645 26.3578 17.6645Z"></path>
						<path d="M29.7504 17.6645H29.0137C28.6471 17.6645 28.3496 17.3672 28.3496 17.0004C28.3496 16.6336 28.6471 16.3363 29.0137 16.3363H29.7504C30.1172 16.3363 30.4145 16.6336 30.4145 17.0004C30.4145 17.3672 30.1172 17.6645 29.7504 17.6645Z"></path>
						<path d="M27.6856 19.7293C27.319 19.7293 27.0215 19.432 27.0215 19.0652V18.3285C27.0215 17.9617 27.319 17.6644 27.6856 17.6644C28.0524 17.6644 28.3496 17.9617 28.3496 18.3285V19.0652C28.3496 19.432 28.0524 19.7293 27.6856 19.7293Z"></path>
						<path d="M27.6856 16.3366C27.319 16.3366 27.0215 16.0393 27.0215 15.6725V14.9358C27.0215 14.569 27.319 14.2717 27.6856 14.2717C28.0524 14.2717 28.3496 14.569 28.3496 14.9358V15.6725C28.3496 16.0393 28.0524 16.3366 27.6856 16.3366Z"></path>
						<path d="M4.98674 28.3499H4.25002C3.88322 28.3499 3.58594 28.0526 3.58594 27.6858C3.58594 27.319 3.88322 27.0217 4.25002 27.0217H4.98674C5.35328 27.0217 5.65082 27.319 5.65082 27.6858C5.65082 28.0526 5.35328 28.3499 4.98674 28.3499Z"></path>
						<path d="M8.38029 28.3499H7.64357C7.27677 28.3499 6.97949 28.0526 6.97949 27.6858C6.97949 27.319 7.27677 27.0217 7.64357 27.0217H8.38029C8.74683 27.0217 9.04437 27.319 9.04437 27.6858C9.04437 28.0526 8.74683 28.3499 8.38029 28.3499Z"></path>
						<path d="M6.31545 30.415C5.94865 30.415 5.65137 30.1178 5.65137 29.751V29.0142C5.65137 28.6474 5.94865 28.3502 6.31545 28.3502C6.68199 28.3502 6.97953 28.6474 6.97953 29.0142V29.751C6.97953 30.1178 6.68199 30.415 6.31545 30.415Z"></path>
						<path d="M6.31545 27.0217C5.94865 27.0217 5.65137 26.7244 5.65137 26.3576V25.6212C5.65137 25.2544 5.94865 24.9571 6.31545 24.9571C6.68199 24.9571 6.97953 25.2544 6.97953 25.6212V26.3576C6.97953 26.7244 6.68199 27.0217 6.31545 27.0217Z"></path>
						<path d="M10.3295 12.3219H9.59279C9.22625 12.3219 8.92871 12.0247 8.92871 11.6579C8.92871 11.2911 9.22625 10.9938 9.59279 10.9938H10.3295C10.6961 10.9938 10.9936 11.2911 10.9936 11.6579C10.9936 12.0247 10.6961 12.3219 10.3295 12.3219Z"></path>
						<path d="M13.7231 12.3219H12.9863C12.6195 12.3219 12.3223 12.0247 12.3223 11.6579C12.3223 11.2911 12.6195 10.9938 12.9863 10.9938H13.7231C14.0896 10.9938 14.3871 11.2911 14.3871 11.6579C14.3871 12.0247 14.0896 12.3219 13.7231 12.3219Z"></path>
						<path d="M11.6582 14.3868C11.2914 14.3868 10.9941 14.0892 10.9941 13.7227V12.986C10.9941 12.6192 11.2914 12.3219 11.6582 12.3219C12.0248 12.3219 12.3223 12.6192 12.3223 12.986V13.7227C12.3223 14.0892 12.0248 14.3868 11.6582 14.3868Z"></path>
						<path d="M11.6582 10.9937C11.2914 10.9937 10.9941 10.6964 10.9941 10.3296V9.59288C10.9941 9.22608 11.2914 8.9288 11.6582 8.9288C12.0248 8.9288 12.3223 9.22608 12.3223 9.59288V10.3296C12.3223 10.6964 12.0248 10.9937 11.6582 10.9937Z"></path>
						<path d="M10.3295 23.0073H9.59279C9.22625 23.0073 8.92871 22.7101 8.92871 22.3433C8.92871 21.9764 9.22625 21.6792 9.59279 21.6792H10.3295C10.6961 21.6792 10.9936 21.9764 10.9936 22.3433C10.9936 22.7101 10.6961 23.0073 10.3295 23.0073Z"></path>
						<path d="M13.7231 23.0073H12.9863C12.6195 23.0073 12.3223 22.7101 12.3223 22.3433C12.3223 21.9764 12.6195 21.6792 12.9863 21.6792H13.7231C14.0896 21.6792 14.3871 21.9764 14.3871 22.3433C14.3871 22.7101 14.0896 23.0073 13.7231 23.0073Z"></path>
						<path d="M11.6582 25.0722C11.2914 25.0722 10.9941 24.7749 10.9941 24.4081V23.6714C10.9941 23.3046 11.2914 23.0073 11.6582 23.0073C12.0248 23.0073 12.3223 23.3046 12.3223 23.6714V24.4081C12.3223 24.7749 12.0248 25.0722 11.6582 25.0722Z"></path>
						<path d="M11.6582 21.6792C11.2914 21.6792 10.9941 21.3819 10.9941 21.0151V20.2786C10.9941 19.9118 11.2914 19.6146 11.6582 19.6146C12.0248 19.6146 12.3223 19.9118 12.3223 20.2786V21.0151C12.3223 21.3819 12.0248 21.6792 11.6582 21.6792Z"></path>
						<path d="M24.4076 12.3219H23.6709C23.3044 12.3219 23.0068 12.0247 23.0068 11.6579C23.0068 11.2911 23.3044 10.9938 23.6709 10.9938H24.4076C24.7742 10.9938 25.0717 11.2911 25.0717 11.6579C25.0717 12.0247 24.7742 12.3219 24.4076 12.3219Z"></path>
						<path d="M21.0151 12.3219H20.2783C19.9118 12.3219 19.6143 12.0247 19.6143 11.6579C19.6143 11.2911 19.9118 10.9938 20.2783 10.9938H21.0151C21.3819 10.9938 21.6791 11.2911 21.6791 11.6579C21.6791 12.0247 21.3819 12.3219 21.0151 12.3219Z"></path>
						<path d="M22.3428 14.3868C21.9763 14.3868 21.6787 14.0892 21.6787 13.7227V12.986C21.6787 12.6192 21.9763 12.3219 22.3428 12.3219C22.7096 12.3219 23.0069 12.6192 23.0069 12.986V13.7227C23.0069 14.0892 22.7096 14.3868 22.3428 14.3868Z"></path>
						<path d="M22.3428 10.9937C21.9763 10.9937 21.6787 10.6964 21.6787 10.3296V9.59288C21.6787 9.22608 21.9763 8.9288 22.3428 8.9288C22.7096 8.9288 23.0069 9.22608 23.0069 9.59288V10.3296C23.0069 10.6964 22.7096 10.9937 22.3428 10.9937Z"></path>
						<path d="M24.4076 23.0073H23.6709C23.3044 23.0073 23.0068 22.7101 23.0068 22.3433C23.0068 21.9764 23.3044 21.6792 23.6709 21.6792H24.4076C24.7742 21.6792 25.0717 21.9764 25.0717 22.3433C25.0717 22.7101 24.7742 23.0073 24.4076 23.0073Z"></path>
						<path d="M21.0151 23.0073H20.2783C19.9118 23.0073 19.6143 22.7101 19.6143 22.3433C19.6143 21.9764 19.9118 21.6792 20.2783 21.6792H21.0151C21.3819 21.6792 21.6791 21.9764 21.6791 22.3433C21.6791 22.7101 21.3819 23.0073 21.0151 23.0073Z"></path>
						<path d="M22.3428 25.0722C21.9763 25.0722 21.6787 24.7749 21.6787 24.4081V23.6714C21.6787 23.3046 21.9763 23.0073 22.3428 23.0073C22.7096 23.0073 23.0069 23.3046 23.0069 23.6714V24.4081C23.0069 24.7749 22.7096 25.0722 22.3428 25.0722Z"></path>
						<path d="M22.3428 21.6792C21.9763 21.6792 21.6787 21.3819 21.6787 21.0151V20.2786C21.6787 19.9118 21.9763 19.6146 22.3428 19.6146C22.7096 19.6146 23.0069 19.9118 23.0069 20.2786V21.0151C23.0069 21.3819 22.7096 21.6792 22.3428 21.6792Z"></path>
						<path d="M15.6713 28.3499H14.9346C14.568 28.3499 14.2705 28.0526 14.2705 27.6858C14.2705 27.319 14.568 27.0217 14.9346 27.0217H15.6713C16.0381 27.0217 16.3354 27.319 16.3354 27.6858C16.3354 28.0526 16.0381 28.3499 15.6713 28.3499Z"></path>
						<path d="M19.0658 28.3499H18.3291C17.9623 28.3499 17.665 28.0526 17.665 27.6858C17.665 27.319 17.9623 27.0217 18.3291 27.0217H19.0658C19.4324 27.0217 19.7299 27.319 19.7299 27.6858C19.7299 28.0526 19.4324 28.3499 19.0658 28.3499Z"></path>
						<path d="M17.001 30.415C16.6342 30.415 16.3369 30.1178 16.3369 29.751V29.0142C16.3369 28.6474 16.6342 28.3502 17.001 28.3502C17.3678 28.3502 17.6651 28.6474 17.6651 29.0142V29.751C17.6651 30.1178 17.3678 30.415 17.001 30.415Z"></path>
						<path d="M17.001 27.0217C16.6342 27.0217 16.3369 26.7244 16.3369 26.3576V25.6212C16.3369 25.2544 16.6342 24.9571 17.001 24.9571C17.3678 24.9571 17.6651 25.2544 17.6651 25.6212V26.3576C17.6651 26.7244 17.3678 27.0217 17.001 27.0217Z"></path>
						<path d="M26.3578 28.3499H25.6211C25.2546 28.3499 24.957 28.0526 24.957 27.6858C24.957 27.319 25.2546 27.0217 25.6211 27.0217H26.3578C26.7246 27.0217 27.0219 27.319 27.0219 27.6858C27.0219 28.0526 26.7246 28.3499 26.3578 28.3499Z"></path>
						<path d="M29.7504 28.3499H29.0137C28.6471 28.3499 28.3496 28.0526 28.3496 27.6858C28.3496 27.319 28.6471 27.0217 29.0137 27.0217H29.7504C30.1172 27.0217 30.4145 27.319 30.4145 27.6858C30.4145 28.0526 30.1172 28.3499 29.7504 28.3499Z"></path>
						<path d="M27.6856 30.415C27.319 30.415 27.0215 30.1178 27.0215 29.751V29.0142C27.0215 28.6474 27.319 28.3502 27.6856 28.3502C28.0524 28.3502 28.3496 28.6474 28.3496 29.0142V29.751C28.3496 30.1178 28.0524 30.415 27.6856 30.415Z"></path>
						<path d="M27.6856 27.0217C27.319 27.0217 27.0215 26.7244 27.0215 26.3576V25.6212C27.0215 25.2544 27.319 24.9571 27.6856 24.9571C28.0524 24.9571 28.3496 25.2544 28.3496 25.6212V26.3576C28.3496 26.7244 28.0524 27.0217 27.6856 27.0217Z"></path>
						<path d="M31.6051 34.001C30.9748 34.001 30.3823 33.7556 29.9366 33.3099L29.9003 33.2736C29.498 32.8713 28.8437 32.8713 28.4417 33.2734L28.4051 33.3102C27.9597 33.7556 27.3672 34.001 26.7368 34.001C26.1067 34.001 25.5142 33.7556 25.0686 33.3099L25.0323 33.2736C24.6299 32.8713 23.9757 32.8713 23.5734 33.2734L23.5373 33.3097C23.0914 33.7556 22.4989 34.001 21.8685 34.001C21.2384 34.001 20.646 33.7556 20.2003 33.3099L20.1637 33.2731C19.7616 32.8713 19.1074 32.8713 18.7053 33.2734L18.6685 33.3102C18.2231 33.7556 17.6306 34.001 17.0005 34.001C16.3701 34.001 15.7777 33.7556 15.332 33.3099L15.2957 33.2736C14.8933 32.8713 14.2391 32.8713 13.837 33.2734L13.8007 33.3097C13.3551 33.7556 12.7626 34.001 12.1322 34.001C11.5019 34.001 10.9094 33.7556 10.4637 33.3099L10.4271 33.2731C10.2326 33.0786 9.97368 32.9714 9.69793 32.9714C9.4227 32.9714 9.16356 33.0788 8.969 33.2734L8.93268 33.3097C8.48676 33.7556 7.89428 34.001 7.26392 34.001C6.63382 34.001 6.04133 33.7556 5.59567 33.3099L5.55935 33.2736C5.15701 32.8713 4.50279 32.8713 4.10071 33.2734L4.06387 33.3102C3.61873 33.7556 3.02624 34.001 2.39588 34.001C1.76578 34.001 1.17304 33.7556 0.727377 33.3099L0.690801 33.2731C-0.228797 32.3535 -0.228797 30.8567 0.69106 29.9366L0.727377 29.9006C0.922452 29.7055 1.02959 29.4463 1.02959 29.1711C1.02959 28.8956 0.922452 28.6365 0.727377 28.4417L0.690801 28.4051C-0.228797 27.4852 -0.228797 25.9884 0.69106 25.0686L0.727377 25.0323C0.922452 24.8372 1.02959 24.5783 1.02959 24.3028C1.02959 24.0273 0.922452 23.7684 0.727637 23.5736L0.690801 23.5368C-0.228797 22.6172 -0.228797 21.1201 0.69106 20.2003L0.727377 20.164C0.922452 19.9689 1.02959 19.71 1.02959 19.4345C1.02959 19.1593 0.922452 18.9001 0.727637 18.7056L0.690801 18.6688C-0.228797 17.7489 -0.228797 16.2521 0.69106 15.3323L0.727377 15.2959C0.922452 15.1009 1.02959 14.842 1.02959 14.5665C1.02959 14.291 0.922452 14.0321 0.727637 13.8373L0.690801 13.8005C0.245399 13.3551 0 12.7626 0 12.1325C0 11.5021 0.245399 10.9096 0.69106 10.464L0.727377 10.4276C0.922452 10.2328 1.02959 9.97368 1.02959 9.69819C1.02959 9.42296 0.922452 9.16382 0.727637 8.969L0.690801 8.93242C-0.228797 8.01257 -0.228797 6.51579 0.69106 5.59593L0.727377 5.55961C0.922452 5.36454 1.02959 5.10565 1.02959 4.83016C1.02959 4.55467 0.922452 4.29578 0.727637 4.10097L0.690542 4.06387C-0.228797 3.14427 -0.228797 1.64749 0.69106 0.727637L0.727377 0.69132C1.17304 0.245399 1.76578 0 2.39588 0C3.02624 0 3.61873 0.245399 4.06439 0.69106L4.10071 0.727377C4.50305 1.12972 5.15727 1.12972 5.55935 0.727637L5.59593 0.690801C6.04133 0.245399 6.63382 0 7.26418 0C7.89428 0 8.48702 0.245399 8.93268 0.69106L8.96926 0.727896C9.16382 0.922452 9.4227 1.02959 9.69819 1.02959C9.97368 1.02959 10.2328 0.922192 10.4274 0.727637L10.4637 0.69132C10.9096 0.245399 11.5021 0 12.1322 0C12.7626 0 13.3551 0.245399 13.8007 0.69106L13.837 0.727377C14.0321 0.922452 14.291 1.02959 14.5665 1.02959C14.8417 1.02959 15.1009 0.922452 15.2954 0.727637L15.3323 0.690801C15.7779 0.245399 16.3704 0 17.0005 0C17.6306 0 18.2231 0.245399 18.6688 0.69106L18.7053 0.727377C19.1074 1.12972 19.7616 1.12972 20.164 0.727637L20.2 0.69132C20.646 0.245399 21.2384 0 21.8688 0C22.4989 0 23.0914 0.245399 23.537 0.69106L23.5739 0.727896C23.9757 1.12972 24.6299 1.12972 25.032 0.727637L25.0688 0.690801C25.5142 0.245399 26.1067 0 26.7368 0C27.3672 0 27.9597 0.245399 28.4053 0.69106L28.4417 0.727377C28.844 1.12972 29.4982 1.12972 29.9 0.727637L29.9369 0.690801C30.3823 0.245399 30.9748 0 31.6051 0C32.2352 0 32.828 0.245399 33.2736 0.69106L33.3102 0.727896C34.2298 1.64749 34.2298 3.14427 33.3099 4.06439L33.2736 4.10045C33.0786 4.29552 32.9714 4.55467 32.9714 4.8299C32.9714 5.10539 33.0786 5.36454 33.2736 5.55935L33.3102 5.59593C34.2298 6.51579 34.2298 8.01257 33.3099 8.93242L33.2736 8.96874C33.0786 9.16382 32.9714 9.4227 32.9714 9.69819C32.9714 9.97368 33.0786 10.2326 33.2734 10.4274L33.3102 10.4642C34.2298 11.3838 34.2298 12.8809 33.3099 13.8007L33.2736 13.837C33.0786 14.0321 32.9714 14.291 32.9714 14.5665C32.9714 14.8417 33.0786 15.1009 33.2734 15.2957L33.3102 15.3323C34.2298 16.2521 34.2298 17.7489 33.3099 18.6688L33.2736 18.7051C33.0786 18.9001 32.9714 19.159 32.9714 19.4345C32.9714 19.71 33.0786 19.9689 33.2734 20.1637L33.3102 20.2006C34.2298 21.1201 34.2298 22.6172 33.3099 23.537L33.2736 23.5734C33.0786 23.7684 32.9714 24.0273 32.9714 24.3028C32.9714 24.578 33.0786 24.8372 33.2734 25.032L33.3102 25.0686C34.2298 25.9884 34.2298 27.4852 33.3099 28.4051L33.2736 28.4414C33.0786 28.6365 32.9714 28.8954 32.9714 29.1708C32.9714 29.4463 33.0786 29.7052 33.2736 29.9L33.3102 29.9369C34.2298 30.8565 34.2301 32.3533 33.3102 33.2731L33.2736 33.3097C32.828 33.7556 32.2352 34.001 31.6051 34.001ZM29.1711 31.6433C29.8012 31.6433 30.3937 31.8887 30.8394 32.3343L30.8757 32.3706C31.0707 32.5657 31.3296 32.6728 31.6051 32.6728C31.8806 32.6728 32.1395 32.5657 32.3343 32.3706L32.3706 32.3346C32.3706 32.3343 32.3706 32.3343 32.3706 32.3343C32.773 31.9322 32.773 31.278 32.3706 30.8759L32.3341 30.8391C31.8887 30.3937 31.6433 29.8012 31.6433 29.1711C31.6433 28.5407 31.8887 27.9483 32.3343 27.5026L32.3706 27.4663C32.773 27.0639 32.773 26.4097 32.3706 26.0076L32.3341 25.9708C31.8887 25.5254 31.6433 24.9329 31.6433 24.3028C31.6433 23.6725 31.8887 23.08 32.3343 22.6343L32.3706 22.598C32.773 22.1957 32.773 21.5414 32.3706 21.1393L32.3341 21.1028C31.8887 20.6574 31.6433 20.0649 31.6433 19.4345C31.6433 18.8042 31.8887 18.2117 32.3343 17.766L32.3706 17.73C32.773 17.3276 32.773 16.6731 32.3706 16.2711L32.3341 16.2345C31.8887 15.7891 31.6433 15.1966 31.6433 14.5662C31.6433 13.9361 31.8887 13.3436 32.3343 12.898L32.3706 12.8617C32.773 12.4593 32.773 11.8051 32.3706 11.403L32.3341 11.3662C31.8887 10.9208 31.6433 10.3283 31.6433 9.69793C31.6433 9.06783 31.8887 8.47535 32.3343 8.02969L32.3706 7.99337C32.773 7.59103 32.773 6.93681 32.3706 6.53472L32.3341 6.49815C31.8887 6.05249 31.6433 5.46 31.6433 4.8299C31.6433 4.19954 31.8887 3.60706 32.3343 3.16139L32.3706 3.12508C32.773 2.723 32.773 2.06851 32.3706 1.66643L32.3341 1.62985C32.1395 1.4353 31.8806 1.3279 31.6051 1.3279C31.3296 1.3279 31.0705 1.4353 30.8759 1.63011L30.8391 1.66669C30.3937 2.11209 29.8012 2.35749 29.1708 2.35749C28.5407 2.35749 27.9483 2.11209 27.5026 1.66643L27.4663 1.63037C27.2712 1.4353 27.0123 1.32816 26.7368 1.32816C26.4613 1.32816 26.2025 1.4353 26.0076 1.63011L25.9711 1.66695C25.0512 2.58655 23.5542 2.58655 22.6346 1.66669L22.5977 1.63011C22.4032 1.4353 22.144 1.32816 21.8685 1.32816C21.5933 1.32816 21.3342 1.4353 21.1393 1.63011L21.1033 1.66643C20.1829 2.58655 18.6861 2.58655 17.7663 1.66669L17.73 1.63037C17.5349 1.4353 17.276 1.32816 17.0005 1.32816C16.725 1.32816 16.4661 1.4353 16.2713 1.63011L16.2347 1.66695C15.3146 2.58655 13.8181 2.58655 12.898 1.66669L12.8617 1.63037C12.6668 1.4353 12.4077 1.32816 12.1322 1.32816C11.857 1.32816 11.5978 1.4353 11.403 1.63011L11.3667 1.66643C10.4468 2.58655 8.9498 2.58655 8.02969 1.66669L7.99311 1.62985C7.79856 1.4353 7.53967 1.32816 7.26418 1.32816C6.98869 1.32816 6.72954 1.4353 6.53498 1.63011L6.49815 1.66695C6.05275 2.11235 5.46026 2.35775 4.8299 2.35775C4.1998 2.35775 3.60732 2.11235 3.16165 1.66669L3.12534 1.63037C2.93052 1.4353 2.67137 1.32816 2.39588 1.32816C2.12039 1.32816 1.86151 1.4353 1.66669 1.63037L1.63037 1.66643C1.22803 2.06877 1.22803 2.723 1.63037 3.12508L1.66669 3.16165C2.11235 3.60732 2.35775 4.1998 2.35775 4.83016C2.35775 5.46026 2.11235 6.05275 1.66669 6.49841L1.63037 6.53472C1.22803 6.93706 1.22803 7.59129 1.63037 7.99337L1.66695 8.03021C2.11235 8.47561 2.35775 9.06809 2.35775 9.69819C2.35775 10.3286 2.11235 10.921 1.66669 11.3667L1.63037 11.403C1.22803 11.8054 1.22803 12.4596 1.63037 12.8617L1.66695 12.8982C2.11235 13.3436 2.35775 13.9361 2.35775 14.5665C2.35775 15.1968 2.11235 15.7893 1.66669 16.235L1.63037 16.2711C1.22803 16.6734 1.22803 17.3279 1.63037 17.73L1.66695 17.7665C2.11235 18.2119 2.35775 18.8044 2.35775 19.4348C2.35775 20.0649 2.11235 20.6574 1.66669 21.103L1.63037 21.1393C1.22803 21.5417 1.22803 22.1959 1.63037 22.598L1.66695 22.6348C2.11235 23.0802 2.35775 23.6727 2.35775 24.3031C2.35775 24.9332 2.11235 25.5257 1.66669 25.9713L1.63037 26.0076C1.22803 26.41 1.22803 27.0642 1.63037 27.4663L1.66695 27.5029C2.11235 27.9485 2.35775 28.541 2.35775 29.1711C2.35775 29.8015 2.11235 30.394 1.66669 30.8396L1.63037 30.8759C1.22803 31.278 1.22803 31.9325 1.63037 32.3346L1.66695 32.3712C1.86151 32.5657 2.12039 32.6731 2.39588 32.6731C2.67137 32.6731 2.93052 32.5657 3.12508 32.3709L3.16191 32.3343C3.60732 31.8889 4.1998 31.6435 4.83016 31.6435C5.46026 31.6435 6.05275 31.8889 6.49841 32.3346L6.53472 32.3706C6.7298 32.5657 6.98869 32.6731 7.26418 32.6731C7.53967 32.6731 7.79856 32.5657 7.99337 32.3709L8.02969 32.3346C8.9498 31.4145 10.4466 31.4145 11.3667 32.3346L11.4033 32.3712C11.5978 32.5657 11.857 32.6731 12.1325 32.6731C12.4077 32.6731 12.6668 32.5657 12.8617 32.3709L12.8977 32.3348C13.8181 31.4147 15.3149 31.4147 16.2347 32.3346L16.2711 32.3709C16.4661 32.566 16.725 32.6731 17.0005 32.6731C17.276 32.6731 17.5349 32.566 17.7297 32.3712L17.7663 32.3343C18.6861 31.4147 20.1832 31.4147 21.103 32.3346L21.1396 32.3714C21.3342 32.566 21.5933 32.6731 21.8688 32.6731C22.144 32.6731 22.4032 32.566 22.598 32.3712L22.6343 32.3348C23.5544 31.4147 25.0512 31.4147 25.9713 32.3346L26.0076 32.3709C26.2025 32.566 26.4616 32.6731 26.7368 32.6731C27.0123 32.6731 27.2712 32.566 27.466 32.3712L27.5029 32.3343C27.9483 31.8887 28.5407 31.6433 29.1711 31.6433Z"></path>
					</svg>
				);
			case 2:
				return (
					<svg
						width="34"
						height="34"
						viewBox="0 0 34 34"
						xmlns="http://www.w3.org/2000/svg"
					>
						<path d="M17.2182 11.7951C15.3028 11.7951 13.75 13.5364 13.75 15.6844C13.75 17.8324 15.3027 19.5738 17.2182 19.5738C19.1336 19.5738 20.6864 17.8325 20.6864 15.6844C20.6864 13.5364 19.1337 11.7951 17.2182 11.7951ZM17.2182 17.7216C16.2149 17.7216 15.4015 16.8095 15.4015 15.6843C15.4015 14.5592 16.2149 13.6471 17.2182 13.6471C18.2215 13.6471 19.0349 14.5592 19.0349 15.6843C19.0349 16.8095 18.2215 17.7216 17.2182 17.7216Z"></path>
						<path d="M31.0495 2.90519L8.50644 0.0345874C7.63152 -0.104906 6.74507 0.181525 6.0705 0.821742C5.396 1.40825 4.96364 2.27765 4.87315 3.22938L4.46031 7.0261H3.18031C1.36363 7.0261 0.00111578 8.83181 0.00111578 10.8691V29.8063C-0.0446411 31.749 1.32261 33.3656 3.05505 33.4169C3.09678 33.4181 3.13858 33.4184 3.18031 33.4178H25.8473C27.6639 33.4178 29.3155 31.8435 29.3155 29.8063V29.0655C29.8787 28.9434 30.413 28.6911 30.8844 28.3246C31.5533 27.693 31.9817 26.7986 32.0817 25.8244L33.981 7.0261C34.1746 4.98413 32.8679 3.14722 31.0495 2.90519ZM27.6639 29.8063C27.6639 30.8249 26.7556 31.5657 25.8473 31.5657H3.18031C2.35977 31.5927 1.67507 30.8687 1.65097 29.9485C1.64971 29.9011 1.65026 29.8537 1.65263 29.8063V26.38L8.05227 21.1017C8.82104 20.4397 9.90388 20.4986 10.6121 21.2405L15.1125 25.6854C15.7959 26.3289 16.6562 26.6887 17.5485 26.7041C18.2462 26.7136 18.9324 26.5053 19.5304 26.1021L27.664 20.8238V29.8063H27.6639ZM27.6639 18.6477L18.6632 24.5279C17.8903 25.0414 16.912 24.9484 16.2272 24.2964L11.6855 19.8052C10.3839 18.5509 8.48139 18.474 7.10259 19.62L1.65263 24.0649V10.8691C1.65263 9.85044 2.27197 8.87816 3.18031 8.87816H25.8473C26.8177 8.92327 27.6014 9.7822 27.6639 10.8691V18.6477ZM32.3311 6.77609C32.3305 6.78221 32.33 6.78841 32.3294 6.79453L30.3889 25.5928C30.3922 26.0803 30.194 26.5419 29.8521 26.843C29.687 27.0282 29.3154 27.1208 29.3154 27.2134V10.8691C29.2502 8.75975 27.7287 7.07387 25.8472 7.0261H6.11175L6.48334 3.4146C6.56394 2.94694 6.78198 2.52314 7.10267 2.21074C7.46478 1.92998 7.90259 1.79908 8.34135 1.84029L30.8432 4.75725C31.7511 4.85394 32.4173 5.75781 32.3311 6.77609Z"></path>
					</svg>
				);
			default:
				return (
					<svg
						width="34"
						height="27"
						viewBox="0 0 34 27"
						xmlns="http://www.w3.org/2000/svg"
					>
						<path d="M10.8044 4.13885C11.2217 4.13885 11.5599 3.80058 11.5599 3.3833C11.5599 2.96602 11.2217 2.62775 10.8044 2.62775C10.3871 2.62775 10.0488 2.96602 10.0488 3.3833C10.0488 3.80058 10.3871 4.13885 10.8044 4.13885Z"></path>
						<path d="M26.1238 18.1344L26.4069 14.3756L25.0885 14.2762L24.8775 17.0767L22.5726 15.1205L15.6279 15.2037V13.8876C16.233 13.8558 16.8267 13.7259 17.3965 13.4989C18.0309 13.2462 18.6025 12.8877 19.0989 12.4319L29.0178 12.0953L26.1818 10.7163C19.7256 7.40978 15.5585 2.89581 15.1021 2.38932C14.6791 1.91993 13.6536 0.802106 13.2656 0.561552C12.673 0.194165 11.9928 0 11.2985 0C10.8026 0 10.3163 0.0982214 9.85327 0.291942C8.68333 0.781328 7.8765 1.82749 7.63984 3.01342L5.95402 4.49219L7.84223 5.13297C8.024 5.5808 8.28989 5.99002 8.62622 6.33474C8.76061 6.47246 9.174 6.82518 9.84094 7.38501C9.66699 8.39356 9.77455 9.42233 10.1579 10.3846C10.8779 12.1919 12.447 13.4568 14.3058 13.8011V15.2194L7.33312 15.3029C7.48878 14.1632 7.2604 12.9942 6.66496 11.9482C5.95041 10.6927 4.81436 9.79932 3.46631 9.43271L2.83148 9.26005L2.6557 9.89404C2.28249 11.2403 2.47059 12.6732 3.18515 13.9287C3.47575 14.4393 3.83692 14.8887 4.25275 15.2683C2.32337 15.6826 0.69244 17.1523 0.172554 19.0639L0 19.6988L0.633996 19.8746C1.07749 19.9975 1.53732 20.0599 2.00065 20.0599C4.21458 20.0599 6.24951 18.6435 7.02501 16.6289L16.9877 16.5096L15.6358 17.9367C15.0438 17.7077 14.417 17.5899 13.7656 17.5899C11.6915 17.5899 9.7866 18.7664 8.91272 20.5872L8.62805 21.1803L9.21972 21.4679C9.92427 21.8103 10.6859 21.9839 11.4835 21.9839C12.4962 21.9839 13.4682 21.7029 14.2998 21.2038C14.269 21.5961 14.279 21.9962 14.3346 22.3992C14.5321 23.8303 15.2552 25.0816 16.371 25.9224L16.8964 26.3183L17.2949 25.7949C18.1412 24.6834 18.4985 23.2831 18.3012 21.852C18.132 20.6261 17.5761 19.533 16.7191 18.716L18.8302 16.4876L22.0942 16.4485L33.1443 25.8272L34 24.8191L26.1238 18.1344ZM11.3862 9.89521C11.0538 9.06088 10.9931 8.16145 11.2106 7.29406L11.3112 6.89318L10.8284 6.48757C10.5192 6.22824 9.69788 5.53957 9.57244 5.41119C9.27994 5.11141 9.06933 4.7348 8.9635 4.32208C8.66978 3.1767 9.27177 1.96849 10.3636 1.51177C10.6642 1.38599 10.9788 1.32221 11.2986 1.32221C11.7465 1.32221 12.1859 1.44782 12.5625 1.6811C12.6681 1.75421 13.1879 2.23993 14.1222 3.27681C14.5507 3.75242 18.1687 7.67289 23.8433 10.9477L18.5379 11.1278L18.353 11.3148C17.9423 11.7304 17.4559 12.0519 16.9072 12.2704C16.4023 12.4715 15.8736 12.5734 15.3356 12.5734C13.5846 12.5735 12.0343 11.5223 11.3862 9.89521ZM10.4834 20.5335C11.2306 19.5305 12.4519 18.912 13.7656 18.912C14.1095 18.912 14.4438 18.955 14.7657 19.0402C14.0185 20.0431 12.7972 20.6617 11.4834 20.6617C11.1397 20.6617 10.8054 20.6187 10.4834 20.5335ZM16.9912 22.0326C17.1031 22.8434 16.9715 23.6628 16.6273 24.3686C16.1049 23.7823 15.7563 23.0292 15.6444 22.2184C15.5326 21.4077 15.6641 20.5883 16.0084 19.8824C16.5308 20.4688 16.8794 21.2219 16.9912 22.0326ZM3.80497 10.9705C4.50775 11.3209 5.11102 11.8909 5.51591 12.6022C5.92079 13.3135 6.10279 14.1232 6.04518 14.9063C5.34241 14.5559 4.73914 13.986 4.33425 13.2746C3.92936 12.5633 3.74736 11.7538 3.80497 10.9705ZM2.00065 18.7377C1.9031 18.7377 1.80582 18.7339 1.70899 18.7265C2.37398 17.3872 3.80653 16.4728 5.35619 16.4728C5.45374 16.4728 5.55102 16.4766 5.64785 16.4839C4.98286 17.8233 3.5502 18.7377 2.00065 18.7377Z"></path>
					</svg>
				);
		}
	}

	//выбрать цвет для эко-кожи

	const handleChangeEcoColor = (colorId, type) => {
		dispatch(handleChangeCoverEcoColor({ colorId, type }));
	};
	//выбрать  декор по id
	const handleChangeDecor = (decorId, type) => {
		dispatch(handleChangeCoverDecor({ decorId, type }));
	};
	//выбрать глобальный тип
	const handleChangeType = typeId => {
		dispatch(handleChangeCoverType(typeId));
	};

	//выбрать цвет тиснения
	const handleChangeEcoLetteringColor = (colorId, type) => {
		dispatch(handleChangeCoverEcoLetteringColor({ colorId, type }));
	};

	//выбрать узор
	const handleChangeDesign = (designId, type) => {
		dispatch(handleChangeCoverEcoDesign({ designId, type }));
	};

	//изменить формат фотовставки
	const handleChangePhotoBidSize = (sizeId, type) => {
		dispatch(handleChangeEcoPhotoBidSize({ sizeId, type }));
	};

	//выбрать цвет пластины
	const handleChangeMetalplateColor = (colorId, type) => {
		dispatch(handleChangeEcoMetalplateColor({ colorId, type }));
	};
	//изменить форму пластины
	const handleChangeMetalplateSize = (sizeId, type) => {
		dispatch(handleChangeEcoMetalplateSize({ sizeId, type }));
	};
	//гравировка или текст?
	const handleChangeMetalplateDecoration = (decId, type) => {
		dispatch(handleChangeEcoMetalplateDecoration({ decId, type }));
	};
	//изменить гравировку
	const handleChangeMetalplateEngrave = (egsId, type) => {
		dispatch(handleChangeEcoMetalplateEngrave({ egsId, type }));
	};
	//изменить цвет для фотообложки
	const handleChangePhotoCoverClr = (typeId, colorId) => {
		dispatch(handleChangePhotoCoverColor({ typeId, colorId }));
	};
	//main content
	function getTypeContent(id) {
		switch (id) {
			//Эко-кожа
			case 0:
				return (
					<div className="cover__type_content">
						<div className="cover__eco_colors">
							<div className="eco__colors_title cover__main_title">Цвет:</div>
							<div className="eco__colors">
								{types[0].features.colors.map((color, idx) => (
									<div
										onClick={() => handleChangeEcoColor(color.id, "eco")}
										key={`${color.id}:${idx}`}
										className={`eco__colors_item ${
											color.id === types[0].selectedColor &&
											"eco__colors_item--active"
										}`}
									>
										<img
											src={require(`../../../../assets/eco_leather_colors/${color.title}_${color.id}.png`)}
											alt="eco_color"
										/>
									</div>
								))}
							</div>
						</div>
						<div className="cover__eco_decor">
							<div className="eco__decor_title cover__main_title">
								Оформление:
							</div>
							<div className="eco__decors">
								{types[0].features.decor.map((dec, idx) => (
									<div
										key={`${dec.id}:${idx}`}
										onClick={() => handleChangeDecor(dec.id, "eco")}
										className={`eco__decor_item ${
											types[0].selectedDecor === dec.id &&
											"eco__decor_item--active"
										}`}
									>
										<div className="custom__checkbox"> </div>
										<span>{dec.transl}</span>
									</div>
								))}
							</div>
							<div className="eco__decor_content">
								{getEcoDecorContent(types[0].selectedDecor)}
							</div>
						</div>
					</div>
				);
			//Ткань
			case 1:
				return (
					<div className="cover__type_content">
						<div className="cover__eco_colors">
							<div className="eco__colors_title cover__main_title">Цвет:</div>
							<div className="eco__colors">
								{types[1].features.colors.map((color, idx) => (
									<div
										onClick={() => handleChangeEcoColor(color.id, "textile")}
										key={`${color.id}:${idx}`}
										className={`eco__colors_item ${
											color.id === types[1].selectedColor &&
											"eco__colors_item--active"
										}`}
									>
										<img
											src={require(`../../../../assets/textile_colors/${color.title}_${color.id}.png`)}
											alt="eco_color"
										/>
									</div>
								))}
							</div>
						</div>
						<div className="cover__eco_decor">
							<div className="eco__decor_title cover__main_title">
								Оформление:
							</div>
							<div className="eco__decors">
								{types[1].features.decor.map((dec, idx) => (
									<div
										key={`${dec.id}:${idx}`}
										onClick={() => handleChangeDecor(dec.id, "textile")}
										className={`eco__decor_item ${
											types[1].selectedDecor === dec.id &&
											"eco__decor_item--active"
										}`}
									>
										<div className="custom__checkbox"> </div>
										<span>{dec.transl}</span>
									</div>
								))}
							</div>
							<div className="eco__decor_content">
								{getTextileDecorContent(types[1].selectedDecor)}
							</div>
						</div>
					</div>
				);
			//Фотообложка
			case 2:
				return (
					<div className="cover__type_content">
						<span className="cover__type_title cover__main_title">
							Цвет обложки
						</span>
						<div className="cover__type_colors">
							<div className="cover__type_eco_colors">
								<span className="eco__colors_title">Эко-кожа:</span>
								<div className="eco__colors">
									{types[2].options[0].colors.map((color, idx) => (
										<div
											onClick={() => handleChangePhotoCoverClr(0, color.id)}
											key={`${color.id}:${idx}`}
											className={`eco__colors_item ${
												color.id === types[2].selectedColor &&
												types[2].selectedType === 0 &&
												"eco__colors_item--active"
											}`}
										>
											<img
												src={require(`../../../../assets/eco_leather_colors/${color.title}_${color.id}.png`)}
												alt="eco_color"
											/>
										</div>
									))}
								</div>
							</div>
							<div className="cover__type_textile_colors">
								<span className="textile__colors_title">Ткань:</span>
								<div className="eco__colors">
									{types[2].options[1].colors.map((color, idx) => (
										<div
											onClick={() => handleChangePhotoCoverClr(1, color.id)}
											key={`${color.id}:${idx}`}
											className={`eco__colors_item ${
												color.id === types[2].selectedColor &&
												types[2].selectedType === 1 &&
												"eco__colors_item--active"
											}`}
										>
											<img
												src={require(`../../../../assets/textile_colors/${color.title}_${color.id}.png`)}
												alt="eco_color"
											/>
										</div>
									))}
								</div>
							</div>
						</div>

						<div className="photoCover__uploader">
							<label onChange={photoCoverChange} htmlFor="photoCover_upload">
								<input
									name=""
									type="file"
									accept="image/jpeg,image/png,image/jpg,image/JPEG,image/PNG,image/JPG,image/BPM"
									id="photoCover_upload"
									hidden
								/>
								Выбрать фото
							</label>
						</div>
					</div>
				);
			default:
				break;
		}
	}

	//изменить размер текста (для пластины)

	const handleChangeTextSize = (tValue, typeId) => {
		let idx;
		switch (typeId) {
			case "eco":
				let ecoTextSizeObj =
					types[0].features.decor[2].options[2].decors[1].sizes.find(
						size => size.value === tValue
					);
				idx = ecoTextSizeObj.id;
				break;
			default:
				let textileTextSizeObj =
					types[1].features.decor[2].options[2].decors[1].sizes.find(
						size => size.value === tValue
					);
				idx = textileTextSizeObj.id;
				break;
		}
		dispatch(handleChangeMetalplateTextSize({ typeId, value: idx }));
	};
	//изменить шрифт текста (для пластины)

	const handleChangeFont = (tValue, typeId) => {
		let idx;
		switch (typeId) {
			case "eco":
				let ecoTextFontObj =
					types[0].features.decor[2].options[2].decors[1].fonts.find(
						font => font.value === tValue
					);
				idx = ecoTextFontObj.id;
				break;
			default:
				let textileTextFontObj =
					types[1].features.decor[2].options[2].decors[1].fonts.find(
						font => font.value === tValue
					);
				idx = textileTextFontObj.id;
				break;
		}
		dispatch(handleChangeMetalplateTextFont({ typeId, value: idx }));
	};
	//изменить текст (для пластины)
	const handleChangeText = (value, typeId) => {
		dispatch(handleChangeMetalplateText({ typeId, value }));
	};
	//Загрузить фото для фотовствки эко кожи и ткани
	function uploadImageToServer(keyImg, file) {
		let formData = new FormData();
		if (keyImg === "eco") {
			formData.append("eco_photobid", file);
		} else if (keyImg === "textile") {
			formData.append("textile_photobid", file);
		} else {
			formData.append("photocover", file);
		}
		axios({
			method: "post",
			url: `${BASE_URL}/designer/?controller=Album&method=image&album=${albumId}`,
			data: formData,
			headers: { "Content-Type": "multipart/form-data" },
		})
			.then(res => {
				if (res.status === 200) {
					let reader = new FileReader();
					reader.readAsDataURL(file);
					reader.onload = function () {
						if (keyImg === "eco") {
							dispatch(
								handleChangePhotoBidBlobImage({
									blob: reader.result,
									type: "eco",
								})
							);
						} else if (keyImg === "textile") {
							dispatch(
								handleChangePhotoBidBlobImage({
									blob: reader.result,
									type: "textile",
								})
							);
						} else {
							dispatch(handleChangePhotoCoverImage(reader.result));
						}
					};
				}
			})
			.catch(e => {
				toast.error("Что-то пошло не так");
			});
	}

	const photoBidImageChange = (e, coverType) => {
		if (e.target.files && e.target.files[0]) {
			let img = e.target.files[0];
			if (img.size > 20000000) {
				return toast.error("Максимальный размер файла 20мб");
			}
			uploadImageToServer(coverType, img);
		}
	};

	const photoCoverChange = e => {
		if (e.target.files && e.target.files[0]) {
			let img = e.target.files[0];
			if (img.size > 20000000) {
				return toast.error("Максимальный размер файла 20мб");
			}
			uploadImageToServer("photocover", img);
		}
	};

	//получить контент оформления эко кожи
	function getEcoDecorContent(decorId) {
		switch (decorId) {
			//Тиснение
			case 0:
				return (
					<div className="eco__lettering_content">
						<span className="eco__lettering_title">Настройки тиснения</span>
						<div className="eco__lettering_colors">
							<span className="eco__lettering_colors--title">
								Цвет тиснения:
							</span>
							<div className="eco__lettering_colors_content">
								{types[0].features.decor[0].options[0].colors.map(
									(color, idx) => (
										<div
											onClick={() =>
												handleChangeEcoLetteringColor(color.id, "eco")
											}
											key={`${color.id}:${idx}`}
											className={`eco__lettering_colors_item ${
												color.id ===
													types[0].features.decor[0].options[0].selectedColor &&
												"eco__lettering_colors_item--active"
											}`}
										>
											<img
												src={require(`../../../../assets/eco_leather_lettering_colors/${color.title}.png`)}
												alt="lettering_color"
											/>
										</div>
									)
								)}
							</div>
						</div>
						<div className="eco__lettering_design">
							<span className="eco__lettering_design--title">Узор:</span>
							<div className="eco__lettering_design_content">
								{types[0].features.decor[0].options[1].designs.map(
									(design, idx) => (
										<div
											onClick={() => handleChangeDesign(design.id, "eco")}
											style={{
												backgroundImage:
													"url(" +
													require(`../../../../assets/eco_leather_lettering_designs/${design.title}_colorless.png`) +
													")",
												backgroundPosition: "center",
												backgroundSize: "contain",
												backgroundRepeat: "no-repeat",
											}}
											key={`${design.id}:${idx}`}
											className={`eco__lettering_designs_item ${
												types[0].features.decor[0].options[1].selectedDesign ===
													design.id && "eco__lettering_designs_item--active"
											}`}
										></div>
									)
								)}
							</div>
						</div>
					</div>
				);
			//Фотовставка
			case 1:
				return (
					<div className="eco__photoBid_content">
						<span className="eco__photoBid_title">Настройки фотоставки</span>
						<span className="eco__photoBid_atitle">Формат:</span>
						<div className="eco__photoBid_sizes">
							{types[0].features.decor[1].sizes.map((size, idx) => (
								<div
									onClick={() => handleChangePhotoBidSize(size.id, "eco")}
									key={`${size}:${idx}`}
									className={`eco__photoBid_sizes_item eco__photoBid_sizes_item--${
										size.title
									} ${
										types[0].features.decor[1].selectedSize === size.id &&
										"eco__photoBid_sizes_item--active"
									}`}
								></div>
							))}
						</div>
						<div className="photoBid__uploader">
							<label
								onChange={e => photoBidImageChange(e, "eco")}
								htmlFor="photobid_upload"
							>
								<input
									accept="image/*"
									name=""
									type="file"
									id="photobid_upload"
									hidden
								/>
								Выбрать фото
							</label>
						</div>
					</div>
				);
			//Металлическая пластина
			case 2:
				return (
					<div className="eco__metalPlate_content">
						<span className="eco__metalPlate_title">Настройки пластины</span>
						<div className="eco__metalPlate_colors">
							<span className="eco__metalPlate_colors--title">Цвет:</span>
							<div className="eco__metalPlate__colors_content">
								{types[0].features.decor[2].options[0].colors.map(
									(color, idx) => (
										<div
											key={`${color.id}:${idx}`}
											onClick={() =>
												handleChangeMetalplateColor(color.id, "eco")
											}
											className={`eco__metalPlate_colors_item ${
												types[0].features.decor[2].options[0].selectedColor ===
													color.id && "eco__metalPlate_colors_item--active"
											}`}
										>
											<img
												src={require(`../../../../assets/eco_metalplate_colors/${color.title}.png`)}
												alt="metal_plate_color"
											/>
										</div>
									)
								)}
							</div>
						</div>
						<div className="eco__metalPlate_sizes">
							<span className="eco__metalPlate_sizes--title">Форма:</span>
							<div className="eco__metalPlate_sizes_content">
								{types[0].features.decor[2].options[1].sizes.map(
									(size, idx) => (
										<div
											onClick={() => handleChangeMetalplateSize(size.id, "eco")}
											key={`${size.id}:${idx}`}
											className={`eco__metalPlate_sizes_item eco__metalPlate_sizes_item--${
												size.title
											} ${
												types[0].features.decor[2].options[1].selectedSize ===
													size.id && "eco__metalPlate_sizes_item--active"
											}`}
										></div>
									)
								)}
							</div>
						</div>
						<div className="eco__metalPlate_decorations">
							<span className="eco__metalPlate_decorations--title">
								Оформление пластины:
							</span>
							<div className="eco__decors">
								{types[0].features.decor[2].options[2].decors.map(
									(decor, idx) => (
										<div
											onClick={() =>
												handleChangeMetalplateDecoration(decor.id, "eco")
											}
											key={`${decor.id}:${idx}`}
											className={`eco__decor_item ${
												decor.id ===
													types[0].features.decor[2].options[2]
														.selectedDecoration && "eco__decor_item--active"
											} `}
										>
											<div className="custom__checkbox"> </div>
											<span>{decor.transl}</span>
										</div>
									)
								)}
							</div>
							{types[0].features.decor[2].options[2].selectedDecoration ===
								0 && (
								<div className="eco__metalPlate_decs">
									{types[0].features.decor[2].options[2].decors[0].engraves.map(
										(egs, idx) => (
											<div
												onClick={() =>
													handleChangeMetalplateEngrave(egs.id, "eco")
												}
												key={`${egs.id}:${idx}`}
												className={`eco__metalPlate_dec ${
													egs.id ===
														types[0].features.decor[2].options[2].decors[0]
															.selectedEngrave && "eco__metalPlate_dec--active"
												}`}
												style={{
													backgroundImage:
														"url(" +
														require(`../../../../assets/eco_metalplate_decorations_${
															types[0].features.decor[2].options[1]
																.selectedSize === 0
																? "quadratic"
																: "rectangular"
														}/${egs.title}.png`) +
														")",
													backgroundPosition: "center",
													backgroundSize: "contain",
													backgroundRepeat: "no-repeat",
												}}
											></div>
										)
									)}
								</div>
							)}
							{types[0].features.decor[2].options[2].selectedDecoration ===
								1 && (
								<div className="eco__metalPlate_text">
									<div className="eco__metalPlate_text-input">
										<textarea
											onChange={e => handleChangeText(e.target.value, "eco")}
											value={
												types[0].features.decor[2].options[2].decors[1]
													.typedText
											}
											placeholder="Введите текст"
										/>
									</div>

									<div className="eco__metalPlate_text-fonts">
										<select
											className="select__css"
											onChange={e => handleChangeFont(e.target.value, "eco")}
											value={
												types[0].features.decor[2].options[2].decors[1].fonts[
													types[0].features.decor[2].options[2].decors[1]
														.selectedFont
												].value
											}
										>
											{types[0].features.decor[2].options[2].decors[1].fonts.map(
												(font, idx) => (
													<option key={`${font.id}:${idx}`} value={font.value}>
														{font.value}
													</option>
												)
											)}
										</select>
									</div>
									<div className="eco__metalPlate_text-sizes">
										<select
											className="select__css"
											onChange={e =>
												handleChangeTextSize(e.target.value, "eco")
											}
											value={
												types[0].features.decor[2].options[2].decors[1].sizes[
													types[0].features.decor[2].options[2].decors[1]
														.selectedSize
												].value
											}
										>
											{types[0].features.decor[2].options[2].decors[1].sizes.map(
												(size, idx) => (
													<option key={`${size.id}:${idx}`} value={size.value}>
														{size.value}
													</option>
												)
											)}
										</select>
									</div>
								</div>
							)}
						</div>
					</div>
				);
			//Без всего
			case 3:
				return null;
			default:
				break;
		}
	}
	//получить контент оформления ткани
	function getTextileDecorContent(decorId) {
		switch (decorId) {
			//Тиснение
			case 0:
				return (
					<div className="eco__lettering_content">
						<span className="eco__lettering_title">Настройки тиснения</span>
						<div className="eco__lettering_colors">
							<span className="eco__lettering_colors--title">
								Цвет тиснения:
							</span>
							<div className="eco__lettering_colors_content">
								{types[1].features.decor[0].options[0].colors.map(
									(color, idx) => (
										<div
											onClick={() =>
												handleChangeEcoLetteringColor(color.id, "textile")
											}
											key={`${color.id}:${idx}`}
											className={`eco__lettering_colors_item ${
												color.id ===
													types[1].features.decor[0].options[0].selectedColor &&
												"eco__lettering_colors_item--active"
											}`}
										>
											<img
												src={require(`../../../../assets/eco_leather_lettering_colors/${color.title}.png`)}
												alt="lettering_color"
											/>
										</div>
									)
								)}
							</div>
						</div>
						<div className="eco__lettering_design">
							<span className="eco__lettering_design--title">Узор:</span>
							<div className="eco__lettering_design_content">
								{types[1].features.decor[0].options[1].designs.map(
									(design, idx) => (
										<div
											onClick={() => handleChangeDesign(design.id, "textile")}
											key={`${design.id}:${idx}`}
											className={`eco__lettering_designs_item ${
												types[1].features.decor[0].options[1].selectedDesign ===
													design.id && "eco__lettering_designs_item--active"
											}`}
											style={{
												backgroundImage:
													"url(" +
													require(`../../../../assets/eco_leather_lettering_designs/${design.title}_colorless.png`) +
													")",
												backgroundPosition: "center",
												backgroundSize: "contain",
												backgroundRepeat: "no-repeat",
											}}
										></div>
									)
								)}
							</div>
						</div>
					</div>
				);
			//Фотовставка
			case 1:
				return (
					<div className="eco__photoBid_content">
						<span className="eco__photoBid_title">Настройки фотоставки</span>
						<span className="eco__photoBid_atitle">Формат:</span>
						<div className="eco__photoBid_sizes">
							{types[1].features.decor[1].sizes.map((size, idx) => (
								<div
									onClick={() => handleChangePhotoBidSize(size.id, "textile")}
									key={`${size}:${idx}`}
									className={`eco__photoBid_sizes_item eco__photoBid_sizes_item--${
										size.title
									} ${
										types[1].features.decor[1].selectedSize === size.id &&
										"eco__photoBid_sizes_item--active"
									}`}
								></div>
							))}
						</div>
						<div className="photoBid__uploader">
							<label
								onChange={e => photoBidImageChange(e, "textile")}
								htmlFor="photobid_upload"
							>
								<input
									accept="image/*"
									name=""
									type="file"
									id="photobid_upload"
									hidden
								/>
								Выбрать фото
							</label>
						</div>
					</div>
				);
			//Металлическая пластина
			case 2:
				return (
					<div className="eco__metalPlate_content">
						<span className="eco__metalPlate_title">Настройки пластины</span>
						<div className="eco__metalPlate_colors">
							<span className="eco__metalPlate_colors--title">Цвет:</span>
							<div className="eco__metalPlate__colors_content">
								{types[1].features.decor[2].options[0].colors.map(
									(color, idx) => (
										<div
											key={`${color.id}:${idx}`}
											onClick={() =>
												handleChangeMetalplateColor(color.id, "textile")
											}
											className={`eco__metalPlate_colors_item ${
												types[1].features.decor[2].options[0].selectedColor ===
													color.id && "eco__metalPlate_colors_item--active"
											}`}
										>
											<img
												src={require(`../../../../assets/eco_metalplate_colors/${color.title}.png`)}
												alt="metal_plate_color"
											/>
										</div>
									)
								)}
							</div>
						</div>
						<div className="eco__metalPlate_sizes">
							<span className="eco__metalPlate_sizes--title">Форма:</span>
							<div className="eco__metalPlate_sizes_content">
								{types[1].features.decor[2].options[1].sizes.map(
									(size, idx) => (
										<div
											onClick={() =>
												handleChangeMetalplateSize(size.id, "textile")
											}
											key={`${size.id}:${idx}`}
											className={`eco__metalPlate_sizes_item eco__metalPlate_sizes_item--${
												size.title
											} ${
												types[1].features.decor[2].options[1].selectedSize ===
													size.id && "eco__metalPlate_sizes_item--active"
											}`}
										></div>
									)
								)}
							</div>
						</div>
						<div className="eco__metalPlate_decorations">
							<span className="eco__metalPlate_decorations--title">
								Оформление пластины:
							</span>
							<div className="eco__decors">
								{types[1].features.decor[2].options[2].decors.map(
									(decor, idx) => (
										<div
											onClick={() =>
												handleChangeMetalplateDecoration(decor.id, "textile")
											}
											key={`${decor.id}:${idx}`}
											className={`eco__decor_item ${
												decor.id ===
													types[1].features.decor[2].options[2]
														.selectedDecoration && "eco__decor_item--active"
											} `}
										>
											<div className="custom__checkbox"> </div>
											<span>{decor.transl}</span>
										</div>
									)
								)}
							</div>
							{types[1].features.decor[2].options[2].selectedDecoration ===
								0 && (
								<div className="eco__metalPlate_decs">
									{types[1].features.decor[2].options[2].decors[0].engraves.map(
										(egs, idx) => (
											<div
												onClick={() =>
													handleChangeMetalplateEngrave(egs.id, "textile")
												}
												key={`${egs.id}:${idx}`}
												className={`eco__metalPlate_dec ${
													egs.id ===
														types[1].features.decor[2].options[2].decors[0]
															.selectedEngrave && "eco__metalPlate_dec--active"
												}`}
												style={{
													backgroundImage:
														"url(" +
														require(`../../../../assets/eco_metalplate_decorations_${
															types[1].features.decor[2].options[1]
																.selectedSize === 0
																? "quadratic"
																: "rectangular"
														}/${egs.title}.png`) +
														")",
													backgroundPosition: "center",
													backgroundSize: "contain",
													backgroundRepeat: "no-repeat",
												}}
											></div>
										)
									)}
								</div>
							)}

							{types[1].features.decor[2].options[2].selectedDecoration ===
								1 && (
								<div className="eco__metalPlate_text">
									<div className="eco__metalPlate_text-input">
										<textarea
											onChange={e =>
												handleChangeText(e.target.value, "textile")
											}
											value={
												types[1].features.decor[2].options[2].decors[1]
													.typedText
											}
											placeholder="Введите текст"
										/>
									</div>
									<div className="eco__metalPlate_text-fonts">
										<select
											className="select__css"
											onChange={e =>
												handleChangeFont(e.target.value, "textile")
											}
											value={
												types[1].features.decor[2].options[2].decors[1].fonts[
													types[1].features.decor[2].options[2].decors[1]
														.selectedFont
												].value
											}
										>
											{types[1].features.decor[2].options[2].decors[1].fonts.map(
												(font, idx) => (
													<option key={`${font.id}:${idx}`} value={font.value}>
														{font.value}
													</option>
												)
											)}
										</select>
									</div>
									<div className="eco__metalPlate_text-sizes">
										<select
											className="select__css"
											onChange={e =>
												handleChangeTextSize(e.target.value, "textile")
											}
											value={
												types[1].features.decor[2].options[2].decors[1].sizes[
													types[1].features.decor[2].options[2].decors[1]
														.selectedSize
												].value
											}
										>
											{types[1].features.decor[2].options[2].decors[1].sizes.map(
												(size, idx) => (
													<option key={`${size.id}:${idx}`} value={size.value}>
														{size.value}
													</option>
												)
											)}
										</select>
									</div>
								</div>
							)}
						</div>
					</div>
				);
			//Без всего
			case 3:
				return null;
			default:
				break;
		}
	}
	return (
		<div className="cnsr__cover">
			<div className="cnsr__cover_leftside">
				<div className="cnsr__cover_types">
					{types.map((type, idx) => (
						<div
							onClick={() => handleChangeType(type.id)}
							key={`${type}:${idx}`}
							className={`cover__types_item ${
								selectedType === type.id && "cover__types_item--active"
							}`}
						>
							<div className="cover__types_img">{getTypeSvg(type.id)}</div>
							<div className="cover__types_title">
								<span>{type.transl}</span>
							</div>
						</div>
					))}
				</div>
			</div>
			<div className="cnsr__cover_rightside">
				{getTypeContent(selectedType)}
			</div>
		</div>
	);
};

export default Cover;
